stages:
  - qa
  - build
  - deploy

variables:
  NODE_ENV: production
  IMAGE: hub.sekhnet.ra/budget-web
  NAMESPACE: budget

lint:
  image: node
  stage: qa
  cache:
    paths:
      - ./node_modules/
  script:
    - npm install
    - ./scripts/lint.sh

build-prod:
  image: docker:latest
  stage: build
  before_script: []
  services: []
  only:
    - main
  script:
    - docker pull $IMAGE:latest || true
    - docker build -t "$IMAGE:latest" -t "$IMAGE:$CI_COMMIT_SHA" --cache-from $IMAGE:latest .
    - docker image push --all-tags "$IMAGE"


build-dev:
  image: docker:latest
  stage: build
  before_script: []
  services: []
  only:
    - dev
  script:
    - docker pull $IMAGE:dev || true
    - docker build -t "$IMAGE:dev" -t "$IMAGE:$CI_COMMIT_SHA" --cache-from $IMAGE:dev .
    - docker image push --all-tags "$IMAGE"

release:
  stage: deploy
  image: hub.sekhnet.ra/semantic_release:latest
  script:
    - npx semantic-release
  only:
    - main

deploy-staging:
  stage: deploy
  before_script: []
  services: []
  image: hub.sekhnet.ra/helm:latest
  only:
    - dev
  script:
    - git clone --branch dev http://gitlab-ci-token:${CI_JOB_TOKEN}@git.sekhnet.ra/sekhnet/applications/budget/budget-helm.git
    - ./budget-helm/ci/setup-ci-service-account.sh $STAGING_TOKEN $CA
    - |
      helm upgrade \
          -n $NAMESPACE-staging $NAMESPACE-staging \
          ./budget-helm/budget \
          --reuse-values --atomic \
          --set=web.image.tag="$CI_COMMIT_SHA" \
          --set=web.image.repository="$IMAGE"

deploy-prod:
  stage: deploy
  before_script: []
  services: []
  image: hub.sekhnet.ra/helm:latest
  only:
    - main
  script:
    - git clone --branch main http://gitlab-ci-token:${CI_JOB_TOKEN}@git.sekhnet.ra/sekhnet/applications/budget/budget-helm.git
    - ./budget-helm/ci/setup-ci-service-account.sh $PROD_TOKEN $CA
    - |
      helm upgrade \
          -n $NAMESPACE $NAMESPACE \
          ./budget-helm/budget \
          --reuse-values --atomic \
          --set=web.image.tag="$CI_COMMIT_SHA" \
          --set=web.image.repository="$IMAGE"
